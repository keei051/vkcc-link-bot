import os
import re
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from utils import shorten_vk_link, send_long_message

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_BULK_LINKS = 50
url_pattern = re.compile(r"https?://[^\s]+")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.MARKDOWN_V2)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Å–æ–∫—Ä–∞—â–∞—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VK.cc\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n"
        "–ú–∞–∫—Å–∏–º—É–º ‚Äî 50 –∑–∞ —Ä–∞–∑.",
        reply_markup=main_menu
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(F.text == "/help")
async def cmd_help(message: Message):
    await message.answer(
        "üõ† –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (–¥–æ 50 —à—Ç—É–∫), –∏ —è –∏—Ö —Å–æ–∫—Ä–∞—â—É —á–µ—Ä–µ–∑ VK.cc.\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –∂–º–∏ Enter.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\nhttps://site.ru\nhttps://example.com"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞-—Å—Å—ã–ª–æ–∫
@dp.message(F.text)
async def handle_links(message: Message):
    raw_text = message.text.strip()
    lines = list(filter(None, raw_text.splitlines()))

    if not lines:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if len(lines) > MAX_BULK_LINKS:
        await message.answer(f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ {MAX_BULK_LINKS} —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑.")
        return

    result = []
    for line in lines:
        if not url_pattern.match(line):
            result.append(f"‚ùå `{line}` ‚Äî –Ω–µ —Å—Å—ã–ª–∫–∞")
            continue

        short = await shorten_vk_link(line)
        if short:
            result.append(f"‚úÖ [{line}]({short})")
        else:
            result.append(f"‚ö†Ô∏è `{line}` ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏")

    # –ö–æ–ª-–≤–æ —É—Å–ø–µ—Ö–æ–≤
    success_count = sum(1 for r in result if r.startswith("‚úÖ"))

    header = f"üìä –°–æ–∫—Ä–∞—â–µ–Ω–æ: {success_count}/{len(lines)}\n\n"
    await send_long_message(message, header + "\n\n".join(result))

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
