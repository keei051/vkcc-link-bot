import re
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from utils import is_valid_url, shorten_vk_link, send_long_message

router = Router()

MAX_BULK_LINKS = 50

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üîó –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ (–¥–æ 50), –∏ —è –∏—Ö —Å–æ–∫—Ä–∞—â—É.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–±–µ—Ä–∏ /start")

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n\n–Ø —Å–æ–∫—Ä–∞—â—É –∏ –≤–µ—Ä–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")

@router.message(F.text)
async def handle_links(message: Message):
    raw_text = message.text.strip()
    lines = list(filter(None, raw_text.splitlines()))

    if not lines:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if len(lines) > MAX_BULK_LINKS:
        await message.answer(f"‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ {MAX_BULK_LINKS} —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑.")
        return

    result = []
    success = 0

    for line in lines:
        if not is_valid_url(line):
            result.append(f"‚ùå `{line}` ‚Äî –Ω–µ —Å—Å—ã–ª–∫–∞")
            continue

        short = await shorten_vk_link(line)
        if short:
            success += 1
            result.append(f"‚úÖ [{line}]({short})")
        else:
            result.append(f"‚ö†Ô∏è `{line}` ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏")

    summary = f"üìä –°–æ–∫—Ä–∞—â–µ–Ω–æ: {success}/{len(lines)}\n\n"
    await send_long_message(message, summary + "\n\n".join(result))
