from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from utils import shorten_vk_link, send_long_message, is_valid_url, escape_md

router = Router()

MAX_LINKS = 50

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É) ‚Äî —è —Å–æ–∫—Ä–∞—â—É –∏—Ö —á–µ—Ä–µ–∑ vk.cc"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫–∏ (–¥–æ 50 —à—Ç—É–∫ –∑–∞ —Ä–∞–∑).\n"
        "–Ø —Å–æ–∫—Ä–∞—â—É –∏—Ö –∏ –≤–µ—Ä–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )

@router.message(F.text)
async def handle_links(message: Message):
    raw = message.text.strip()
    lines = list(filter(None, raw.splitlines()))

    if not lines:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–∏–∂—É —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if len(lines) > MAX_LINKS:
        await message.answer(f"‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ {MAX_LINKS} —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑.")
        return

    result = []
    success_count = 0

    for line in lines:
        if is_valid_url(line):
            short = await shorten_vk_link(line)
            if short:
                result.append(f"‚úÖ [{escape_md(line)}]({escape_md(short)})")
                success_count += 1
            else:
                result.append(f"‚ö†Ô∏è `{escape_md(line)}` ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏")
        else:
            result.append(f"‚ùå `{escape_md(line)}` ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞")

    summary = f"üìä –°–æ–∫—Ä–∞—â–µ–Ω–æ: {success_count}/{len(lines)}\n\n"
    await send_long_message(message, summary + "\n".join(result))
