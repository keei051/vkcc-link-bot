from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from keyboards import get_main_keyboard, get_link_actions_keyboard, get_back_keyboard
from database import save_link, get_links_by_user, get_link_by_id, delete_link, rename_link
from vkcc import shorten_link, get_link_stats
from utils import safe_delete, is_valid_url, format_link_stats
import re

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class LinkStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_title = State()
    waiting_for_new_title = State()

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (/start)
@router.message(F.text == "/start")
async def start_command(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(F.text == "/cancel")
async def cancel_command(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É"
@router.message(F.text == "üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def shorten_link_start(message: Message, state: FSMContext):
    await safe_delete(message)
    await message.answer("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ | —Å –ø–æ–¥–ø–∏—Å—å—é).", reply_markup=ReplyKeyboardRemove())
    await state.set_state(LinkStates.waiting_for_url)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
@router.message(LinkStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    await safe_delete(message)
    urls = message.text.strip().split("\n")
    if len(urls) > 50:
        await message.answer("üö´ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 50 —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ —á–∞—Å—Ç—è–º.", reply_markup=get_main_keyboard())
        await state.clear()
        return

    successful_links = []
    failed_links = []
    for url in urls:
        url = url.strip()
        if not url:
            continue
        title = None
        if "|" in url:
            url, title = [part.strip() for part in url.split("|", 1)]
        if not is_valid_url(url):
            failed_links.append(f"–°—Ç—Ä–æ–∫–∞: '{url}' ‚Äî —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞.")
            continue
        if not url.startswith(("http://", "https://")):
            url = "https://" + url
        try:
            short_url = await shorten_link(url)
            vk_key = short_url.split("/")[-1]
            if await save_link(message.from_user.id, url, short_url, title, vk_key):
                successful_links.append({"title": title or "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", "short_url": short_url})
            else:
                failed_links.append(f"–°—Å—ã–ª–∫–∞ '{url}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        except Exception as e:
            failed_links.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ '{url}': {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: " + str(len(successful_links)) + ".\n\n"
    if successful_links:
        response += "üìã –°–ø–∏—Å–æ–∫:\n"
        for i, link in enumerate(successful_links, 1):
            response += f"{i}. {link['title']}:\n{link['short_url']}\n"
    if failed_links:
        response += "\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n" + "\n".join(failed_links)
    await message.answer(response, reply_markup=get_main_keyboard())

    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏"
@router.message(F.text == "üìã –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
async def show_links(message: Message):
    await safe_delete(message)
    links = await get_links_by_user(message.from_user.id)
    if not links:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.", reply_markup=get_main_keyboard())
        return
    keyboard = []
    for link in links:
        link_id, title, short_url, created_at = link
        keyboard.append([get_link_actions_keyboard(link_id, title, short_url)])
    keyboard.append([get_back_keyboard()])
    await message.answer("üìã –í–∞—à–∏ —Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query()
async def process_callback(callback: CallbackQuery):
    await safe_delete(callback.message)
    user_id = callback.from_user.id
    action, link_id = callback.data.split("_")
    link = await get_link_by_id(int(link_id), user_id)

    if not link or link[1] != user_id:
        await callback.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞.")
        return

    link_id, _, long_url, short_url, title, vk_key, created_at = link

    if action == "stats":
        try:
            stats = await get_link_stats(vk_key)
            formatted_stats = format_link_stats(stats, short_url)
            await callback.message.answer(formatted_stats, reply_markup=get_back_keyboard())
        except Exception:
            await callback.message.answer("üìâ –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.\n–û–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—á–Ω—É—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥—ã.", reply_markup=get_back_keyboard())

    elif action == "rename":
        await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏.", reply_markup=ReplyKeyboardRemove())
        await callback.answer()
        await callback.message.bot.set_state(callback.from_user.id, LinkStates.waiting_for_new_title, callback.message.chat.id)
        await callback.message.bot.set_data(callback.from_user.id, {"link_id": link_id})

    elif action == "delete":
        await callback.message.answer(f"‚ùó –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É {short_url}?\n[‚úÖ –î–∞] [‚ùå –ù–µ—Ç]", reply_markup=get_link_actions_keyboard(link_id, title, short_url, delete_confirm=True))
        await callback.answer()

    elif action == "delete_yes":
        if await delete_link(link_id, user_id):
            await callback.message.answer("üóë –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_keyboard())
        else:
            await callback.message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", reply_markup=get_main_keyboard())
        await callback.answer()

    elif action == "delete_no":
        await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_link_actions_keyboard(link_id, title, short_url))
        await callback.answer()

    elif action == "back":
        await show_links(callback.message)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(LinkStates.waiting_for_new_title)
async def process_new_title(message: Message, state: FSMContext):
    await safe_delete(message)
    user_data = await state.get_data()
    link_id = user_data.get("link_id")
    if await rename_link(link_id, message.from_user.id, message.text.strip()):
        await message.answer("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
    else:
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.", reply_markup=get_main_keyboard())
    await state.clear()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
